# Test: Check instantiation
>>> my_list = MyList()
>>> isinstance(my_list, MyList)
True

# Test: Check inherits from list
>>> isinstance(my_list, list)
True

# Test: Check __str__ (string representation of the list)
>>> print(my_list)
[]

# Test: Check append() method
>>> my_list.append(10)
>>> my_list.append(20)
>>> my_list.append(30)
>>> print(my_list)
[10, 20, 30]

# Test: Check print_sorted() with already sorted append
>>> my_list = MyList([1, 2, 3])
>>> my_list.print_sorted()
[1, 2, 3]
>>> print(my_list)  # Ensure original list is unchanged
[1, 2, 3]

# Test: Check print_sorted() with not sorted append
>>> my_list = MyList()
>>> my_list.append(5)
>>> my_list.append(2)
>>> my_list.append(9)
>>> my_list.append(1)
>>> my_list.print_sorted()
[1, 2, 5, 9]
>>> print(my_list)  # Ensure original list is unchanged
[5, 2, 9, 1]

# Test: Check print_sorted() with no sorted append and negative numbers
>>> my_list = MyList()
>>> my_list.append(3)
>>> my_list.append(-1)
>>> my_list.append(2)
>>> my_list.append(-4)
>>> my_list.print_sorted()
[-4, -1, 2, 3]
>>> print(my_list)  # Ensure original list is unchanged
[3, -1, 2, -4]

# Test: Check print_sorted() with an empty list
>>> my_list = MyList()
>>> my_list.print_sorted()
[]
>>> print(my_list)
[]

# Test: Check print_sorted() returns a new list (sorted, does not alter original)
>>> my_list = MyList([5, 3, 9])
>>> sorted_list = my_list.print_sorted()
[3, 5, 9]
>>> print(my_list)
[5, 3, 9]
>>> print(sorted_list is my_list)  # Ensure print_sorted returns a new list
False
